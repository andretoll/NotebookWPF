<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:NotebookWPF.Resources.Dictionaries"
                    xmlns:valueconverters="clr-namespace:NotebookWPF.ValueConverters">

    <!--- Colors -->
    <Color x:Key="DarkGrayColor">#1e1e1e</Color>
    <Color x:Key="LightGrayColor">#303030</Color> 
    
    <!---SolidColorBrushes -->
    <SolidColorBrush x:Key="DarkGrayColorBrush" Color="{StaticResource DarkGrayColor}"></SolidColorBrush>
    <SolidColorBrush x:Key="LightGrayColorBrush" Color="{StaticResource LightGrayColor}"></SolidColorBrush>

    <!--- Font Families -->
    <FontFamily x:Key="DefaultFont">Lato</FontFamily>
    <FontFamily x:Key="LightFont">Segoe UI Light</FontFamily>    
    
    <!---!!! BASE STYLES !!!-->
    
    <!--- Base TextBlock Style -->
    <Style TargetType="TextBlock" x:Key="BaseText">
        <Setter Property="Margin" Value="0 0 0 10"/>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"/>
    </Style>
    
    <!--- Base Button Style -->
    <Style BasedOn="{StaticResource AccentedSquareButtonStyle}" TargetType="Button" x:Key="BaseButton">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"/>
    </Style>    
    
    <!---!!! TEXTBLOCKS !!!-->
    
    <!--- Huge TextBlock -->
    <Style BasedOn="{StaticResource BaseText}" TargetType="TextBlock" x:Key="HugeText">
        <Setter Property="FontSize" Value="26"/>
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"/>
    </Style>

    <!--- Huge Thin TextBlock -->
    <Style BasedOn="{StaticResource BaseText}" TargetType="TextBlock" x:Key="HugeThinText">
        <Setter Property="FontSize" Value="26"/>
        <Setter Property="FontFamily" Value="{StaticResource LightFont}"/>
    </Style>

    <!--- Large TextBlock -->
    <Style BasedOn="{StaticResource BaseText}" TargetType="TextBlock" x:Key="LargeText">
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>

    <!--- Small TextBlock -->
    <Style BasedOn="{StaticResource BaseText}" TargetType="TextBlock" x:Key="SmallText">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <!--- Tiny TextBlock -->
    <Style BasedOn="{StaticResource BaseText}" TargetType="TextBlock" x:Key="TinyText">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Opacity" Value="0.6"/>
        <Setter Property="Margin" Value="0 0 0 5"/>
    </Style>    

    <!---!!! BUTTONS !!!-->
    
    <!--- Large Button -->
    <Style BasedOn="{StaticResource BaseButton}" TargetType="Button" x:Key="LargeButton">
        <Setter Property="Height" Value="40"/>
    </Style>
    
    <!--- Warning Button -->
    <Style BasedOn="{StaticResource SquareButtonStyle}" TargetType="Button" x:Key="WarningButton">
        <Setter Property="Background" Value="Red"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <!--- Circle Button -->
    <Style BasedOn="{StaticResource MetroCircleButtonStyle}" TargetType="Button" x:Key="CircleButton">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentColorBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--- (CUSTOM) Circle Button (Suitable on accents or dark background) -->
    <Style TargetType="Button" x:Key="CircleButtonWhite">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Margin" Value="2 2 2 2"/>
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse x:Name="BorderCircle">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="White"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Ellipse  x:Name="BodyCircle" Margin="2" >
                            <Ellipse.Fill >
                                <SolidColorBrush Color="{DynamicResource AccentBaseColor}"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Rectangle x:Name="Mask"
                        Width="20"
                           Height="20"
                           Fill="{DynamicResource IconButtonActiveBorder}">
                            <Rectangle.OpacityMask>
                                <VisualBrush Stretch="Fill"
                                 Visual="{DynamicResource appbar_lasso}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="BodyCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="BorderCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="Mask" Property="Fill" Value="Black"/>
                            <Setter Property="Foreground" Value="{DynamicResource AccentBaseColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    

    <!---!!! TOGGLEBUTTONS !!!-->

    <!--- Circle ToggleButton -->
    <Style BasedOn="{StaticResource MetroCircleToggleButtonStyle}" TargetType="ToggleButton" x:Key="CircleToggleButton">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="White"/>
    </Style>

    <!--- (CUSTOM) Circle ToggleButton (Suitable on accents or dark background) -->
    <Style TargetType="ToggleButton" x:Key="CircleToggleButtonWhite">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Margin" Value="2 2 2 2"/>
        <Setter Property="Width" Value="45"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Ellipse x:Name="BorderCircle">
                            <Ellipse.Fill>
                                <SolidColorBrush Color="White"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Ellipse  x:Name="BodyCircle" Margin="2" >
                            <Ellipse.Fill >
                                <SolidColorBrush Color="{DynamicResource AccentBaseColor}"/>
                            </Ellipse.Fill>
                        </Ellipse>
                        <Rectangle x:Name="Mask"
                        Width="20"
                           Height="20"
                           Fill="{DynamicResource IconButtonActiveBorder}">
                            <Rectangle.OpacityMask>
                                <VisualBrush Stretch="Fill"
                                 Visual="{DynamicResource appbar_lasso}" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <ContentPresenter x:Name="content" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BodyCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="BorderCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="Mask" Property="Fill" Value="Black"/>
                            <Setter Property="Foreground" Value="{DynamicResource AccentBaseColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="BodyCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="BorderCircle" Property="Fill" Value="White"/>
                            <Setter TargetName="Mask" Property="Fill" Value="Black"/>
                            <Setter Property="Foreground" Value="{DynamicResource AccentBaseColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--- Standard ToggleButton -->
    <Style BasedOn="{StaticResource MetroToggleButton}" TargetType="ToggleButton" x:Key="SquareToggleButton">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="FontSize" Value="12"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentColorBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource AccentBaseColorBrush}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!---!!! Labels !!!-->

    <!--- Label -->
    <Style TargetType="Label" x:Key="LabelStyle">
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Margin" Value="0 10 0 5"/>
    </Style>   
    
    <!---!!! Value Converters !!!-->
    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>
    <valueconverters:NullToVisibilityConverter x:Key="nullToVisibilityConverter"/>
    <valueconverters:ReversedNullToVisibilityConverter x:Key="reversedNullToVisibilityConverter"/>
    <valueconverters:ReversedBooleanToVisibilityConverter x:Key="reversedBooleanToVisibilityConverter"/>
    <valueconverters:BooleanToVisibilityMultiConverter x:Key="booleanToVisibilityMultiConverter"/>
    <valueconverters:BooleanToStringConverter x:Key="booleanToStringConverter"/>
    
    <!---!!! ANIMATIONS !!!--> 
    
    <!--- Visible Property Animation -->
    <Style TargetType="FrameworkElement" x:Key="VisibleAnimation">
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="Opacity" Value="0"/>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                             From="0.0" To="1.0" Duration="0:0:0.5"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--- Show Left Menu Animation -->
    <Storyboard x:Key="sbShowLeftMenu" >
        <ThicknessAnimation Storyboard.TargetProperty="Margin" From="-500,0,0,0" To="0,0,0,0" DecelerationRatio=".9" Duration="0:0:0.6" />
    </Storyboard>
    
    <!--- Hide Left Menu Animation -->
    <Storyboard x:Key="sbHideLeftMenu">
        <ThicknessAnimation Storyboard.TargetProperty="Margin" From="0,0,0,0" To="-500,0,0,0" AccelerationRatio=".9" Duration="0:0:0.8" />
    </Storyboard>

</ResourceDictionary>